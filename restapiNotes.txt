19/3/24

Create REST API

step1: create package.json file 
       npm init
step2:install install express 
      npm i express --save  
step3: install dotenv 
      npm i dotenv --save   

step4: create server.js and create server by using http module 
       and execute it.
step5: create app.js file and create multiple routes by using midleware then export it in server.js file  
step6: to handle multiple request create api folder = > routes folder =>
       create two files 
       -products.js 
       -orders.js 
step7: create multple routes for products.js and order.js file and import it in app.js file and insert it in app.use() midleware.
step8: create dotenv file and access it.
step9: create custome command to start server 
      go to package.json = >in script section write =>  "start":"nodemon server.js",
       terminate server and restart it by writting 
       npm run start
step10: Morgan : it will gives you log information of our actions in server.  
       to use it first install it and then import it in midleware.
       command to install morgan 
       npm i morgan
step11: Error hadling on wrong routepath
step12: use of body-parser 
       -it allows us to feach url encoded data as well as json data, it do not support file data.

       npm install body-parser   
       in app.js import it and use it 

       const bodyParser = require('body-parser');

app.use(bodyParser.urlencoded({extended:false}));
app.use(bodyParser.json());

step13: Handling CORS error 
        C-Cross ,O-origine, R-Resourse , S-sharing 
    -this is error generated by browser.this error occures when request came from different Resourses or url.
    -because of security reasion this error will occure 

    // code to habdle CORS Error 
app.use((req,res,next)=>{
    res.header("Access-Control-Allow-Origin","*");
    res.header("Access-Control-Allow-Header","Origin,X-Requested-Width,Content-Type,Accept,Authorization");
    res.header("Access-Control-Allow-Credentails",true);
    if(res.header==="OPTIONS"){
        res.header("Access-Control-Allow-Method","PUT","POST","DELETE","GET");
        return res.status(200).json();
    }
    next();
})

step14: make request to mongoDB 
       *we create an account on mongoDB 
       to login in clound account : https://account.mongodb.com/account/login

     clic on new project => give name and assign member in products click on create project => create and deploy click on create option => select M0 Free option => selecy AWS => select region (Mumbai) => click on create deploy option => to connect clustomer save userid: panchashilwankhede , password= UKi1gLujoURkhKOK click on create database user => click on choose a connection methode => select compass option => Copy the connection string, then open MongoDB Compass  : mongodb+srv://panchashilwankhede:UKi1gLujoURkhKOK@cluster0.us8zeyi.mongodb.net/ => click on view connection setup => press done. 
     In Main left side pannel go to security => network access => click on edit ip address entry option => click on allow access from anywhere => click on confirm 


  ste14 : use of mongoose library 
  Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment. 
         
         npm i mongoose
ste15: import mongoose library in app.js 
         const mongoose = require('mongoose');

   mongoose.connect("mongodb+srv://panchashilwankhede:"+process.env.MONGO_ATLAS_PW+"@cluster0.us8zeyi.mongodb.net/").then(()=>{console.log("connected successfully with mongoDB Atlas")});

stp16: create model to access data from mongoDB 
      go to api filder => model folder => productModel.js 




Task: create API with get request (all order) as  well as get and delete request api 
      for single order
      

*how to add or upload file oir images on server database.
for this we use multer library.
- Multer: Multer is a node.js middleware for handling multipart/form-data, 
   which is primarily used for uploading files. 
-command to install multer
npm i multer

=============================================================
21/3/24

Task: create API for User containig email,password , for the you have to create get,delete,post,put 
request : get all user 
request : get single user 
request : add  user 
request : update  user 
request : delete  user 


*How to use bcrypt 
npm i bcrypt 

*How to use jsonwebtoken
npm i jsonwebtoken
=================================================================
22/3/24

public 
   -put frontend code in serperate 
   -put API 

*Deployement Of Nodejs app on Heroku server  
step1: go to www.heroku.com 
step2: create account on heroku server successfully.
step3: login in Heroku Accound 
step4: 




























